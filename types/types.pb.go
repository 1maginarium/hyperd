// Code generated by protoc-gen-go.
// source: types/types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types/types.proto

It has these top-level messages:
	ContainerPort
	EnvironmentVar
	VolumeMount
	WaitingStatus
	RunningStatus
	TermStatus
	ContainerStatus
	ContainerInfo
	Container
	RBDVolumeSource
	PodVolume
	PodSpec
	PodStatus
	PodInfo
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Types definitions for HyperContainer
type ContainerPort struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostPort      int32  `protobuf:"varint,2,opt,name=hostPort" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,3,opt,name=containerPort" json:"containerPort,omitempty"`
	Protocol      string `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
	HostIP        string `protobuf:"bytes,5,opt,name=hostIP" json:"hostIP,omitempty"`
}

func (m *ContainerPort) Reset()                    { *m = ContainerPort{} }
func (m *ContainerPort) String() string            { return proto.CompactTextString(m) }
func (*ContainerPort) ProtoMessage()               {}
func (*ContainerPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EnvironmentVar struct {
	Env   string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EnvironmentVar) Reset()                    { *m = EnvironmentVar{} }
func (m *EnvironmentVar) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentVar) ProtoMessage()               {}
func (*EnvironmentVar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VolumeMount struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	ReadOnly  bool   `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (m *VolumeMount) String() string            { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WaitingStatus struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *WaitingStatus) Reset()                    { *m = WaitingStatus{} }
func (m *WaitingStatus) String() string            { return proto.CompactTextString(m) }
func (*WaitingStatus) ProtoMessage()               {}
func (*WaitingStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RunningStatus struct {
	StartedAt string `protobuf:"bytes,1,opt,name=startedAt" json:"startedAt,omitempty"`
}

func (m *RunningStatus) Reset()                    { *m = RunningStatus{} }
func (m *RunningStatus) String() string            { return proto.CompactTextString(m) }
func (*RunningStatus) ProtoMessage()               {}
func (*RunningStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TermStatus struct {
	ExitCode   int32  `protobuf:"varint,1,opt,name=exitCode" json:"exitCode,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	StartedAt  string `protobuf:"bytes,4,opt,name=startedAt" json:"startedAt,omitempty"`
	FinishedAt string `protobuf:"bytes,5,opt,name=finishedAt" json:"finishedAt,omitempty"`
}

func (m *TermStatus) Reset()                    { *m = TermStatus{} }
func (m *TermStatus) String() string            { return proto.CompactTextString(m) }
func (*TermStatus) ProtoMessage()               {}
func (*TermStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ContainerStatus struct {
	Name        string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID string         `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Phase       string         `protobuf:"bytes,3,opt,name=phase" json:"phase,omitempty"`
	Waiting     *WaitingStatus `protobuf:"bytes,4,opt,name=waiting" json:"waiting,omitempty"`
	Running     *RunningStatus `protobuf:"bytes,5,opt,name=running" json:"running,omitempty"`
	Terminated  *TermStatus    `protobuf:"bytes,6,opt,name=terminated" json:"terminated,omitempty"`
}

func (m *ContainerStatus) Reset()                    { *m = ContainerStatus{} }
func (m *ContainerStatus) String() string            { return proto.CompactTextString(m) }
func (*ContainerStatus) ProtoMessage()               {}
func (*ContainerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ContainerStatus) GetWaiting() *WaitingStatus {
	if m != nil {
		return m.Waiting
	}
	return nil
}

func (m *ContainerStatus) GetRunning() *RunningStatus {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *ContainerStatus) GetTerminated() *TermStatus {
	if m != nil {
		return m.Terminated
	}
	return nil
}

// TODO: embed Container message to avoid repetition
type ContainerInfo struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID     string            `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Image           string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ImageID         string            `protobuf:"bytes,4,opt,name=imageID" json:"imageID,omitempty"`
	Commands        []string          `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Args            []string          `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	WorkingDir      string            `protobuf:"bytes,7,opt,name=workingDir" json:"workingDir,omitempty"`
	Ports           []*ContainerPort  `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
	Env             []*EnvironmentVar `protobuf:"bytes,9,rep,name=env" json:"env,omitempty"`
	VolumeMounts    []*VolumeMount    `protobuf:"bytes,10,rep,name=volumeMounts" json:"volumeMounts,omitempty"`
	Tty             bool              `protobuf:"varint,11,opt,name=tty" json:"tty,omitempty"`
	ImagePullPolicy string            `protobuf:"bytes,12,opt,name=imagePullPolicy" json:"imagePullPolicy,omitempty"`
	PodID           string            `protobuf:"bytes,13,opt,name=podID" json:"podID,omitempty"`
	Status          *ContainerStatus  `protobuf:"bytes,14,opt,name=status" json:"status,omitempty"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ContainerInfo) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ContainerInfo) GetEnv() []*EnvironmentVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ContainerInfo) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *ContainerInfo) GetStatus() *ContainerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Container struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID     string            `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Image           string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ImageID         string            `protobuf:"bytes,4,opt,name=imageID" json:"imageID,omitempty"`
	Commands        []string          `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Args            []string          `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	WorkingDir      string            `protobuf:"bytes,7,opt,name=workingDir" json:"workingDir,omitempty"`
	Ports           []*ContainerPort  `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
	Env             []*EnvironmentVar `protobuf:"bytes,9,rep,name=env" json:"env,omitempty"`
	VolumeMounts    []*VolumeMount    `protobuf:"bytes,10,rep,name=volumeMounts" json:"volumeMounts,omitempty"`
	Tty             bool              `protobuf:"varint,11,opt,name=tty" json:"tty,omitempty"`
	ImagePullPolicy string            `protobuf:"bytes,12,opt,name=imagePullPolicy" json:"imagePullPolicy,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Container) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Container) GetEnv() []*EnvironmentVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Container) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

type RBDVolumeSource struct {
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	Image    string   `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	FsType   string   `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	Pool     string   `protobuf:"bytes,4,opt,name=pool" json:"pool,omitempty"`
	User     string   `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Keyring  string   `protobuf:"bytes,6,opt,name=keyring" json:"keyring,omitempty"`
	ReadOnly bool     `protobuf:"varint,7,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *RBDVolumeSource) Reset()                    { *m = RBDVolumeSource{} }
func (m *RBDVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*RBDVolumeSource) ProtoMessage()               {}
func (*RBDVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type PodVolume struct {
	Name   string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Source string           `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Driver string           `protobuf:"bytes,3,opt,name=driver" json:"driver,omitempty"`
	Rbd    *RBDVolumeSource `protobuf:"bytes,4,opt,name=rbd" json:"rbd,omitempty"`
}

func (m *PodVolume) Reset()                    { *m = PodVolume{} }
func (m *PodVolume) String() string            { return proto.CompactTextString(m) }
func (*PodVolume) ProtoMessage()               {}
func (*PodVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PodVolume) GetRbd() *RBDVolumeSource {
	if m != nil {
		return m.Rbd
	}
	return nil
}

type PodSpec struct {
	Volumes    []*PodVolume      `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	Containers []*Container      `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	Labels     map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Vcpu       int32             `protobuf:"varint,4,opt,name=vcpu" json:"vcpu,omitempty"`
	Memory     int32             `protobuf:"varint,5,opt,name=memory" json:"memory,omitempty"`
}

func (m *PodSpec) Reset()                    { *m = PodSpec{} }
func (m *PodSpec) String() string            { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()               {}
func (*PodSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PodSpec) GetVolumes() []*PodVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodStatus struct {
	Phase           string             `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message         string             `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason          string             `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	HostIP          string             `protobuf:"bytes,4,opt,name=hostIP" json:"hostIP,omitempty"`
	PodIP           []string           `protobuf:"bytes,5,rep,name=podIP" json:"podIP,omitempty"`
	StartTime       string             `protobuf:"bytes,6,opt,name=startTime" json:"startTime,omitempty"`
	ContainerStatus []*ContainerStatus `protobuf:"bytes,7,rep,name=containerStatus" json:"containerStatus,omitempty"`
}

func (m *PodStatus) Reset()                    { *m = PodStatus{} }
func (m *PodStatus) String() string            { return proto.CompactTextString(m) }
func (*PodStatus) ProtoMessage()               {}
func (*PodStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PodStatus) GetContainerStatus() []*ContainerStatus {
	if m != nil {
		return m.ContainerStatus
	}
	return nil
}

type PodInfo struct {
	Kind       string     `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	ApiVersion string     `protobuf:"bytes,2,opt,name=apiVersion" json:"apiVersion,omitempty"`
	Vm         string     `protobuf:"bytes,3,opt,name=vm" json:"vm,omitempty"`
	Spec       *PodSpec   `protobuf:"bytes,4,opt,name=spec" json:"spec,omitempty"`
	Status     *PodStatus `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PodInfo) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PodInfo) GetStatus() *PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerPort)(nil), "types.ContainerPort")
	proto.RegisterType((*EnvironmentVar)(nil), "types.EnvironmentVar")
	proto.RegisterType((*VolumeMount)(nil), "types.VolumeMount")
	proto.RegisterType((*WaitingStatus)(nil), "types.WaitingStatus")
	proto.RegisterType((*RunningStatus)(nil), "types.RunningStatus")
	proto.RegisterType((*TermStatus)(nil), "types.TermStatus")
	proto.RegisterType((*ContainerStatus)(nil), "types.ContainerStatus")
	proto.RegisterType((*ContainerInfo)(nil), "types.ContainerInfo")
	proto.RegisterType((*Container)(nil), "types.Container")
	proto.RegisterType((*RBDVolumeSource)(nil), "types.RBDVolumeSource")
	proto.RegisterType((*PodVolume)(nil), "types.PodVolume")
	proto.RegisterType((*PodSpec)(nil), "types.PodSpec")
	proto.RegisterType((*PodStatus)(nil), "types.PodStatus")
	proto.RegisterType((*PodInfo)(nil), "types.PodInfo")
}

var fileDescriptor0 = []byte{
	// 962 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x6e, 0x24, 0x35,
	0x10, 0xd6, 0xfc, 0x67, 0x6a, 0x76, 0x92, 0x5d, 0x6b, 0x59, 0xb5, 0x22, 0x84, 0x56, 0x2d, 0xa4,
	0x5d, 0x21, 0x11, 0x20, 0x48, 0x68, 0xe1, 0x04, 0x6c, 0xf6, 0x10, 0x09, 0xc4, 0xc8, 0x89, 0xc2,
	0x81, 0x53, 0x67, 0xda, 0x49, 0x5a, 0xdb, 0x6d, 0x8f, 0x6c, 0xf7, 0x84, 0xb9, 0x72, 0xe4, 0x09,
	0x40, 0x3c, 0x09, 0xef, 0xc1, 0x0b, 0xf0, 0x06, 0x3c, 0x02, 0xe5, 0xb2, 0xbb, 0xdb, 0x3d, 0x8a,
	0x38, 0x70, 0xe1, 0xc2, 0xa5, 0xe5, 0x2a, 0x97, 0xed, 0xaa, 0xef, 0xab, 0x9f, 0x86, 0x27, 0x76,
	0xb7, 0x11, 0xe6, 0x23, 0xfa, 0x9e, 0x6c, 0xb4, 0xb2, 0x8a, 0x4d, 0x48, 0x48, 0x7f, 0x1d, 0xc0,
	0xf2, 0xb5, 0x92, 0x36, 0x2b, 0xa4, 0xd0, 0x2b, 0xa5, 0x2d, 0x63, 0x30, 0x96, 0x59, 0x25, 0x92,
	0xc1, 0xf3, 0xc1, 0xcb, 0x39, 0xa7, 0x35, 0x3b, 0x86, 0x83, 0x3b, 0x65, 0xac, 0xdb, 0x4f, 0x86,
	0xa8, 0x9f, 0xf0, 0x56, 0x66, 0xef, 0xc3, 0x72, 0x1d, 0x5f, 0x90, 0x8c, 0xc8, 0xa0, 0xaf, 0x74,
	0x37, 0xd0, 0xbb, 0x6b, 0x55, 0x26, 0x63, 0xba, 0xb9, 0x95, 0xd9, 0x33, 0x98, 0xba, 0xdb, 0xce,
	0x57, 0xc9, 0x84, 0x76, 0x82, 0x94, 0xbe, 0x82, 0xc3, 0x37, 0x72, 0x5b, 0x68, 0x25, 0x2b, 0x21,
	0xed, 0x55, 0xa6, 0xd9, 0x63, 0x18, 0x09, 0xb9, 0x0d, 0xae, 0xb9, 0x25, 0x7b, 0x0a, 0x93, 0x6d,
	0x56, 0xd6, 0x82, 0xdc, 0x9a, 0x73, 0x2f, 0xa4, 0x3f, 0xc0, 0xe2, 0x4a, 0x95, 0x75, 0x25, 0xbe,
	0x55, 0xb5, 0x7c, 0x38, 0xa4, 0x77, 0x61, 0x5e, 0xb9, 0xcd, 0x55, 0x66, 0xef, 0xc2, 0xe1, 0x4e,
	0xe1, 0xdc, 0xd5, 0x22, 0xcb, 0xbf, 0x93, 0xe5, 0x8e, 0xe2, 0x39, 0xe0, 0xad, 0x9c, 0xbe, 0x80,
	0xe5, 0xf7, 0x59, 0x61, 0x0b, 0x79, 0x7b, 0x61, 0x33, 0x5b, 0x1b, 0xe7, 0x3f, 0x6e, 0x1a, 0x25,
	0xc3, 0x03, 0x41, 0x4a, 0x3f, 0x84, 0x25, 0xaf, 0xa5, 0xec, 0x0c, 0xf1, 0x4d, 0x63, 0x33, 0x6d,
	0x45, 0xfe, 0x95, 0x0d, 0xb6, 0x9d, 0x22, 0xfd, 0x65, 0x00, 0x70, 0x29, 0x74, 0x15, 0x8c, 0xd1,
	0x05, 0xf1, 0x63, 0x61, 0x5f, 0xab, 0xdc, 0x3b, 0x8e, 0x98, 0x37, 0x72, 0xf4, 0xe2, 0x30, 0x7e,
	0x91, 0x25, 0x30, 0xab, 0x84, 0x31, 0xd9, 0xad, 0x20, 0xaf, 0xe7, 0xbc, 0x11, 0xfb, 0x4f, 0x8f,
	0xf7, 0x9e, 0x66, 0xef, 0x01, 0xdc, 0x14, 0xb2, 0x30, 0x77, 0xb4, 0xed, 0x59, 0x88, 0x34, 0xe9,
	0x5f, 0x03, 0x38, 0x6a, 0xb3, 0x24, 0xf8, 0xf7, 0x10, 0xa8, 0xcf, 0x61, 0xd1, 0xd2, 0x7e, 0x7e,
	0x16, 0x9c, 0x8b, 0x55, 0x8e, 0xaf, 0xcd, 0x5d, 0x66, 0x1a, 0xff, 0xbc, 0xc0, 0x4e, 0x60, 0x76,
	0xef, 0x21, 0x25, 0xdf, 0x16, 0xa7, 0x4f, 0x4f, 0x7c, 0xae, 0xf6, 0x80, 0xe6, 0x8d, 0x91, 0xb3,
	0xd7, 0x1e, 0x59, 0x72, 0xb6, 0xb3, 0xef, 0xe1, 0xcd, 0x1b, 0x23, 0xf6, 0x09, 0x80, 0x45, 0x64,
	0x0b, 0x99, 0x61, 0xbc, 0xc9, 0x94, 0x8e, 0x3c, 0x09, 0x47, 0x3a, 0xc8, 0x79, 0x64, 0x94, 0xfe,
	0x31, 0x8a, 0x0a, 0xe3, 0x5c, 0xde, 0xa8, 0x7f, 0x1f, 0x70, 0x51, 0x75, 0x84, 0x78, 0xc1, 0x11,
	0x45, 0x0b, 0x3c, 0xe3, 0xc9, 0x68, 0x44, 0x47, 0xfb, 0x5a, 0x55, 0x55, 0x26, 0x73, 0x83, 0xb1,
	0x8d, 0x5c, 0xa1, 0x34, 0xb2, 0xf3, 0x20, 0xd3, 0xb7, 0x06, 0x03, 0x70, 0x7a, 0x5a, 0x3b, 0xea,
	0xee, 0x95, 0x7e, 0x8b, 0x51, 0x9e, 0x15, 0x3a, 0x99, 0x79, 0xea, 0x3a, 0x0d, 0xfb, 0x00, 0x01,
	0xc7, 0x02, 0x34, 0xc9, 0x01, 0x1e, 0xea, 0x80, 0xea, 0xd5, 0x3c, 0xf7, 0x26, 0xec, 0x85, 0x2f,
	0xaf, 0x39, 0x59, 0xbe, 0x13, 0x2c, 0xfb, 0x25, 0xe8, 0xab, 0xee, 0x33, 0x78, 0xb4, 0xed, 0xea,
	0xcb, 0x24, 0x40, 0x27, 0x58, 0x38, 0x11, 0x95, 0x1e, 0xef, 0xd9, 0xb9, 0xfa, 0xb5, 0x76, 0x97,
	0x2c, 0xa8, 0xa2, 0xdc, 0x92, 0xbd, 0x84, 0x23, 0x8a, 0x7c, 0x55, 0x97, 0xe5, 0x4a, 0x95, 0xc5,
	0x7a, 0x97, 0x3c, 0xa2, 0x18, 0xf6, 0xd5, 0x94, 0x39, 0x2a, 0x47, 0xc0, 0x96, 0x21, 0x73, 0x9c,
	0x80, 0x99, 0x30, 0x35, 0x44, 0x5e, 0x72, 0x48, 0xac, 0x3e, 0xdb, 0x8f, 0x2f, 0x50, 0x1b, 0xac,
	0xd2, 0x9f, 0x47, 0x30, 0x6f, 0xf7, 0xfe, 0xa7, 0xf4, 0x3f, 0xa5, 0x34, 0xfd, 0x1d, 0xdb, 0x0a,
	0xff, 0xfa, 0xcc, 0x5f, 0x7e, 0xa1, 0x6a, 0xbd, 0xa6, 0x51, 0x53, 0x29, 0x59, 0x58, 0xa5, 0x0d,
	0xd2, 0x42, 0x60, 0x35, 0x72, 0x07, 0xfc, 0x30, 0x06, 0x1e, 0x9b, 0xe1, 0x8d, 0xb9, 0x44, 0x37,
	0x03, 0x1f, 0x41, 0x72, 0xd0, 0x6e, 0x54, 0x3b, 0x6e, 0x68, 0xed, 0x74, 0xb5, 0x11, 0x3a, 0xb4,
	0x38, 0x5a, 0x3b, 0xe2, 0xde, 0x8a, 0x9d, 0x76, 0xcd, 0x64, 0xea, 0x89, 0x0b, 0x62, 0x6f, 0x0a,
	0xcc, 0xf6, 0xa6, 0xc0, 0x0e, 0xe6, 0x2b, 0x95, 0x7b, 0xd7, 0x1f, 0xcc, 0x23, 0x74, 0xcb, 0x50,
	0x48, 0x4d, 0x8f, 0xf6, 0x92, 0xd3, 0xe7, 0xba, 0xd8, 0xa2, 0x13, 0xc1, 0x5d, 0x2f, 0x21, 0x6c,
	0x23, 0x7d, 0x9d, 0x87, 0xfe, 0xd7, 0xa4, 0xf1, 0x1e, 0x3a, 0xdc, 0x99, 0xa4, 0x3f, 0x0d, 0x61,
	0x86, 0x6f, 0x5f, 0x6c, 0xc4, 0x1a, 0x73, 0x61, 0xe6, 0xe9, 0xf0, 0x68, 0x2d, 0x4e, 0x1f, 0x87,
	0x93, 0xad, 0x73, 0xbc, 0x31, 0x60, 0x1f, 0x03, 0xb4, 0x69, 0x6c, 0xd0, 0xab, 0xd8, 0xbc, 0x4d,
	0x1e, 0x1e, 0xd9, 0xb0, 0x53, 0x98, 0x96, 0xd9, 0xb5, 0x28, 0x0d, 0xfa, 0xea, 0xac, 0x8f, 0xbb,
	0xcb, 0xdd, 0xeb, 0x27, 0xdf, 0xd0, 0xe6, 0x1b, 0x69, 0xf5, 0x8e, 0x07, 0x4b, 0x87, 0xc5, 0x76,
	0xbd, 0xa9, 0x29, 0x90, 0x09, 0xa7, 0xb5, 0x8b, 0xb9, 0x12, 0x95, 0xd2, 0x3b, 0x02, 0x7e, 0xc2,
	0x83, 0x74, 0xfc, 0x39, 0x2c, 0xa2, 0x2b, 0x5c, 0x2e, 0x21, 0xf4, 0xcd, 0x78, 0xc7, 0xe5, 0xc3,
	0xe3, 0xfd, 0x8b, 0xe1, 0xab, 0x41, 0xfa, 0xe7, 0x80, 0x08, 0x08, 0xc3, 0xa8, 0x1d, 0x2b, 0x83,
	0x78, 0xac, 0x44, 0xe3, 0x70, 0xd8, 0x1f, 0x87, 0xdd, 0x00, 0x1d, 0xf5, 0x06, 0x68, 0xf7, 0x2b,
	0x32, 0x8e, 0x7f, 0x45, 0x9a, 0xe6, 0xb3, 0x0a, 0xf5, 0xeb, 0x85, 0x76, 0xa8, 0x5e, 0x16, 0xc8,
	0xfd, 0x34, 0x1a, 0xaa, 0x4e, 0xc1, 0xbe, 0x84, 0xa3, 0x75, 0xbf, 0x0b, 0x61, 0x12, 0x8d, 0xfe,
	0xa1, 0x47, 0xed, 0x9b, 0xa7, 0xbf, 0x0d, 0x88, 0xe8, 0x66, 0xfa, 0x60, 0xfd, 0xe7, 0x4d, 0x8a,
	0xb9, 0xb5, 0x6b, 0x14, 0xd9, 0xa6, 0xb8, 0x42, 0xa6, 0x8a, 0xf6, 0x57, 0x20, 0xd2, 0xb0, 0x43,
	0x18, 0x6e, 0xab, 0x10, 0x21, 0xae, 0x58, 0x0a, 0x63, 0x83, 0xb4, 0x85, 0x1c, 0x3b, 0xec, 0x93,
	0xc9, 0x69, 0x0f, 0xd3, 0xb0, 0x69, 0xa8, 0x7e, 0xb2, 0x46, 0xf9, 0xd4, 0x6f, 0xa5, 0xd7, 0x53,
	0xfa, 0x81, 0xfb, 0xf4, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xe3, 0xe3, 0x67, 0x5d, 0x0a,
	0x00, 0x00,
}
